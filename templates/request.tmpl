package requests

import (
	{{range $_, $import := .Imports -}}
	"{{$import}}"
	{{end -}}
	"context"
	"github.com/temoon/telegram-bots-api"
)

type {{.Name}} struct {
	{{range $_, $field := .Fields -}}
    {{$field.Name}} {{if len $field.Variants}}interface{}{{else}}{{$field.Type}}{{end}}
	{{end -}}
}

func (r *{{.Name}}) Call(ctx context.Context, b *telegram.Bot) (response interface{}, err error) {
	response = new({{.ResponseType}})
	err = b.CallMethod(ctx, "{{.Method.Key}}", r, response)
	return
}

{{if .ResponseTypeVariants -}}
func (r *{{.Name}}) CallWithResponse(ctx context.Context, b *telegram.Bot, response interface{}) (err error) {
	switch response.(type) {
	case {{range $i, $type := .ResponseTypeVariants}}{{if $i}}, {{end}}{{$type}}{{end}}:
		err = b.CallMethod(ctx, "{{.Method.Key}}", r, response)
	default:
		err = errors.New("unsupported response type")
	}

	return
}
{{- end}}

func (r *{{.Name}}) GetValues() (values map[string]interface{}, err error) {
	{{- if len .Fields -}}
	values = make(map[string]interface{})

	{{range $_, $field := .Fields -}}
		{{if not $field.Field.IsRequired -}}
			if r.{{$field.Name}} != nil {
		{{end -}}
		{{if len $field.Variants -}}
			switch value := r.{{$field.Name}}.(type) {
			{{range $fieldVariant := $field.Variants -}}
				{{if eq (index $fieldVariant 0).Type "string" -}}
					case string:
					values["{{$field.Field.Key}}"] = value
				{{else if eq (index $fieldVariant 0).Type "int64" -}}
					case int64:
					values["{{$field.Field.Key}}"] = strconv.FormatInt(value, 10)
				{{else if eq (index $fieldVariant 0).Type "float64" -}}
					case float64:
					values["{{$field.Field.Key}}"] = strconv.FormatFloat(value, 'f', -1, 64)
				{{else if eq (index $fieldVariant 0).Type "bool" -}}
					case bool:
					if value {
						values["{{$field.Field.Key}}"] = "1"
					} else {
						values["{{$field.Field.Key}}"] = "0"
					}
				{{else if (index $fieldVariant 0).IsInputFile -}}
					case telegram.InputFile:
					values["{{$field.Field.Key}}"] = value.GetValue()
				{{else if (index $fieldVariant 0).IsChatId -}}
					case telegram.ChatId:
					values["{{$field.Field.Key}}"] = value.String()
				{{else if or (index $fieldVariant 0).IsObject (index $fieldVariant 0).IsArray -}}
					case {{range $i, $v := $fieldVariant}}{{if $i}}, {{end}}{{$v.Type}}{{end}}:
					var data []byte
					if data, err = json.Marshal(value); err != nil {
						return
					}

					values["{{$field.Field.Key}}"] = string(data)
				{{end -}}
			{{end -}}
			default:
				err = errors.New("unsupported {{$field.Field.Key}} field type")
				return
			}
		{{else -}}
			{{if eq $field.Field.Type "string" -}}
				values["{{$field.Field.Key}}"] = {{if not $field.Field.IsRequired}}*{{end}}r.{{$field.Name}}
			{{else if eq $field.Field.Type "int64" -}}
				values["{{$field.Field.Key}}"] = strconv.FormatInt({{if not $field.Field.IsRequired}}*{{end}}r.{{$field.Name}}, 10)
			{{else if eq $field.Field.Type "float64" -}}
				values["{{$field.Field.Key}}"] = strconv.FormatFloat({{if not $field.Field.IsRequired}}*{{end}}r.{{$field.Name}}, 'f', -1, 64)
			{{else if eq $field.Field.Type "bool" -}}
				if {{if not $field.Field.IsRequired}}*{{end}}r.{{$field.Name}} {
					values["{{$field.Field.Key}}"] = "1"
				} else {
					values["{{$field.Field.Key}}"] = "0"
				}
			{{else if $field.IsInputFile -}}
				values["{{$field.Field.Key}}"] = r.{{$field.Name}}.GetValue()
			{{else if $field.IsChatId -}}
				values["{{$field.Field.Key}}"] = r.{{$field.Name}}.String()
			{{else if or $field.IsObject $field.IsArray -}}
				var data{{$field.Name}} []byte
				if data{{$field.Name}}, err = json.Marshal(r.{{$field.Name}}); err != nil {
					return
				}

				values["{{$field.Field.Key}}"] = string(data{{$field.Name}})
			{{end -}}
		{{end -}}
		{{if not $field.Field.IsRequired -}}
			}
		{{end}}
	{{end -}}
	{{- end}}
	return
}

func (r *{{.Name}}) GetFiles() (files map[string]io.Reader) {
	{{- if or (len .Files.Fields) (len .Files.Arrays) (len .Files.Subtypes) (len .Files.Variants) -}}
	files = make(map[string]io.Reader)

	{{range $name, $fields := .Files.Fields -}}
		{{range $_, $field := $fields -}}
		if {{if not $field.IsRequired}}r.{{$name}}.{{$field.Name}} != nil && {{end}}r.{{$name}}.{{$field.Name}}.HasFile() {
			files[r.{{$name}}.{{$field.Name}}.GetFormFieldName()] = r.{{$name}}.{{$field.Name}}.GetFile()
		}
		{{end -}}
	{{- end}}

	{{range $name, $fields := .Files.Arrays -}}
	for _, item := range r.{{$name}} {
		{{range $_, $field := $fields -}}
		if {{if not $field.IsRequired}}item.{{$field.Name}} != nil && {{end}}item.{{$field.Name}}.HasFile() {
			files[item.{{$field.Name}}.GetFormFieldName()] = item.{{$field.Name}}.GetFile()
		}
		{{end -}}
	}
	{{- end}}

	{{range $name, $subtypes := .Files.Subtypes -}}
	switch value := r.{{$name}}.(type) {
		{{range $_, $subtype := $subtypes -}}
		case {{$subtype.Type}}:
			{{range $_, $field := $subtype.Fields -}}
			if {{if not $field.IsRequired}}value.{{$field.Name}} != nil && {{end}}value.{{$field.Name}}.HasFile() {
				files[value.{{$field.Name}}.GetFormFieldName()] = value.{{$field.Name}}.GetFile()
			}
			{{end -}}
		{{end -}}
	}
	{{- end}}

	{{range $name, $variants := .Files.Variants -}}
	switch value := r.{{$name}}.(type) {
		{{range $_, $variant := $variants -}}
		case {{$variant.Type}}:
			{{if $variant.IsArray -}}
			for _, item := range value {
			{{end -}}
			{{range $_, $field := $variant.Fields -}}
			if {{if not $field.IsRequired}}{{if $variant.IsArray}}item{{else}}value{{end}}.{{$field.Name}} != nil && {{end}}{{if $variant.IsArray}}item{{else}}value{{end}}.{{$field.Name}}.HasFile() {
				files[{{if $variant.IsArray}}item{{else}}value{{end}}.{{$field.Name}}.GetFormFieldName()] = {{if $variant.IsArray}}item{{else}}value{{end}}.{{$field.Name}}.GetFile()
			}
			{{end -}}
			{{if $variant.IsArray -}}
			}
			{{end -}}
		{{end -}}
	}
	{{- end}}
	{{end -}}
	return
}
